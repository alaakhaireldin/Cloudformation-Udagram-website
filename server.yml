Description: >
  Deploying a dummy application using infrastructure as a code that runs on Ubuntu 18 from S3 bucket.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  MainBucketName:
    Description: Creating a bucket
    Type: String
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-MyVPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-MyVPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          sudo rm /var/www/html/index.html
          sudo aws s3 cp s3://udacity-bucket-alaa/Udagram.zip /var/www/html
          sudo unzip /var/www/html/Udagram.zip -d /var/www/html
          systemctl restart apache2.service

      ImageId: ami-0729e439b6769d6ab
      KeyName: exercise-key
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
      IamInstanceProfile:
        Fn::ImportValue: !Sub "${EnvironmentName}-InstanceProfile"

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "4"
      MaxSize: "8"
      TargetGroupARNs:
        - Ref: "WebAppTargetGroup"
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: "forward"
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: "path-pattern"
          Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-MyVPCID"

  # SSHPublicSubnet1:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-0729e439b6769d6ab
  #     InstanceType: t3.medium
  #     KeyName: exercise-key
  #     SubnetId:
  #       Fn::ImportValue:
  #         Fn::Sub: "${EnvironmentName}-PUB1-SN"
  #     AvailabilityZone: !Select [ 0, !GetAZs '' ]
  #     SecurityGroupIds:
  #       - Ref: SSHSecGroup
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName} SSH Host 1

  # SSHPublicSubnet2:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: ami-0729e439b6769d6ab
  #     InstanceType: t3.medium
  #     KeyName: exercise-key
  #     SubnetId:
  #       Fn::ImportValue:
  #         Fn::Sub: "${EnvironmentName}-PUB2-SN"
  #     AvailabilityZone: !Select [ 1, !GetAZs '' ]
  #     SecurityGroupIds:
  #       - Ref: SSHSecGroup
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName} SSH Host 2

Outputs:
  WebAppLBURL:
    Description: The Load Balancer URL
    Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-DNS-NAME
